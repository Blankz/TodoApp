//
//  LandingInteractor.swift
//  Todo App
//
//  Created Blankz on 28/1/2564 BE.
//  Copyright Â© 2564 BE Blankz. All rights reserved.
//
//  Template generated by Blankz
//

import UIKit

class LandingInteractor: LandingInteractorInputProtocol {
    weak var presenter: LandingInteractorOutputProtocol?
    
    func performLogin(form: LandingItem.Request) {
        let parameter: [String: Any] = ["email": form.email,
                                        "password": form.password]
        Loading.shared.show()
        Service.shared.requestData(httpMethod: .post,
                                   link: .login,
                                   parameter: parameter) { response in
            Loading.shared.hide()
            switch response {
            case .success(let data):
                do {
                    let registerResponse = try JSONDecoder().decode(LandingItem.Reponse.self, from: data)
                    self.presenter?.didReceive(responseSuccess: registerResponse)
                } catch {
                    self.presenter?.didReceive(errorMessage: "Can't decode")
                }
            case .failure(let message):
                self.presenter?.didReceive(errorMessage: message)
            }
        }
    }
    
    func performRegister(form: LandingItem.Request) {
        let parameter: [String: Any] = ["name": form.name,
                                        "email": form.email,
                                        "password": form.password,
                                        "age": Int(form.age)!]
        Loading.shared.show()
        Service.shared.requestData(httpMethod: .post,
                                   link: .register,
                                   parameter: parameter) { response in
            Loading.shared.hide()
            switch response {
            case .success(let data):
                do {
                    let registerResponse = try JSONDecoder().decode(LandingItem.Reponse.self, from: data)
                    self.presenter?.didReceive(responseSuccess: registerResponse)
                } catch {
                    self.presenter?.didReceive(errorMessage: "Can't decode")
                }
            case .failure(let message):
                self.presenter?.didReceive(errorMessage: message)
            }
        }
    }
}
