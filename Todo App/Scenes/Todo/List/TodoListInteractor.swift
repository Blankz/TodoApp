//
//  TodoListInteractor.swift
//  Todo App
//
//  Created Blankz on 30/1/2564 BE.
//  Copyright Â© 2564 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Blankz
//

import UIKit

class TodoListInteractor: TodoListInteractorInputProtocol {

    weak var presenter: TodoListInteractorOutputProtocol?
    
    func fetchTodoList() {
        Loading.shared.show()
        Service.shared.requestData(link: .task(nil)) { response in
            Loading.shared.hide()
            switch response {
            case .success(let data):
                do {
                    let responseList = try JSONDecoder().decode(TodoListItem.Response.TodoList.self, from: data)
                    self.presenter?.didReceive(List: responseList)
                } catch let error {
                    self.presenter?.didReceive(Error: error.localizedDescription)
                }
            case .failure(let message):
                self.presenter?.didReceive(Error: message)
            }
        }
    }
    
    func createTodo(form: TodoListItem.Request.CreateTodo) {
        let parameter = ["description": form.description]
        
        Loading.shared.show()
        Service.shared.requestData(httpMethod: .post,
                                   link: .task(nil),
                                   parameter: parameter) { response in
            Loading.shared.hide()
            switch response {
            case .success(let data):
                do {
                    let responseTodo = try JSONDecoder().decode(TodoListItem.Response.CreateTodo.self, from: data)
                    self.presenter?.didReceive(todoItem: responseTodo)
                } catch let error {
                    self.presenter?.didReceive(Error: error.localizedDescription)
                }
            case .failure(let message):
                self.presenter?.didReceive(Error: message)
            }
        }
    }

    func deteteTodo(id: String) {
        Loading.shared.show()
        Service.shared.requestData(httpMethod: .delete,
                                   link: .task(id)) { response in
            Loading.shared.hide()
            switch response {
            case .success(let data):
                do {
                    let responseTodo = try JSONDecoder().decode(TodoListItem.Response.DeleteTodo.self,
                                                                from: data)
                    self.presenter?.didReceiveDeleteTodo(response: responseTodo,
                                                         id: id)
                } catch let error {
                    self.presenter?.didReceive(Error: error.localizedDescription)
                }
            case .failure(let message):
                self.presenter?.didReceive(Error: message)
            }
        }
    }
}

//MARK: - Logout
extension TodoListInteractor {
    func logout() {
        Loading.shared.show()
        Service.shared.requestData(httpMethod: .post,
                                   link: .logout) { response in
            Loading.shared.hide()
            switch response {
            case .success(let data):
                do {
                    let responseTodo = try JSONDecoder().decode(TodoListItem.Response.Logout.self,
                                                                from: data)
                    self.presenter?.didReceiveLogout(response: responseTodo)
                } catch let error {
                    self.presenter?.didReceive(Error: error.localizedDescription)
                }
            case .failure(let message):
                self.presenter?.didReceive(Error: message)
            }
        }

    }
}
